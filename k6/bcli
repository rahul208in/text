package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/spf13/cobra"
)

// ... [TestConfig and Config structs remain unchanged] ...

// ... [k6Template constant remains unchanged] ...

var browserFolderPath string

var k6BrowserCmd = &cobra.Command{
	Use:   "browser",
	Short: "Validate browser json file in Config folder and generate k6 scripts",
	Long: `This command validates browser files in the Config folder,
generates k6 script for each environment, and creates a summary report.`,
	Example: "vpe k6 browser -p /path/to/config/folder",
	Run: func(cmd *cobra.Command, args []string) {
		if browserFolderPath == "" {
			fmt.Println("Error: please provide a folder path using the -p flag")
			os.Exit(1)
		}

		err := ValidateBrowserAndFiles(browserFolderPath)
		if err != nil {
			fmt.Printf("Validation failed: %v\n", err)
			os.Exit(1)
		}

		fmt.Println("Validation and k6 script generation completed successfully.")
	},
}

// ValidateBrowserAndFiles scans for environment folders and processes browser.json files
func ValidateBrowserAndFiles(baseDir string) error {
	// Check if base directory exists
	if _, err := os.Stat(baseDir); os.IsNotExist(err) {
		return fmt.Errorf("base directory '%s' does not exist", baseDir)
	}

	fmt.Printf("üîç Scanning for environment folders in: %s\n", baseDir)

	// Read all directories in the base path
	entries, err := ioutil.ReadDir(baseDir)
	if err != nil {
		return fmt.Errorf("error reading base directory '%s': %v", baseDir, err)
	}

	var processedEnvs []string
	var skippedEnvs []string
	var errorEnvs []string

	// Process each directory
	for _, entry := range entries {
		if !entry.IsDir() {
			continue
		}

		envName := entry.Name()
		envPath := filepath.Join(baseDir, envName)
		browserJsonPath := filepath.Join(envPath, "browser.json")

		fmt.Printf("\nüìÅ Processing environment: %s\n", envName)

		// Check if browser.json exists
		if _, err := os.Stat(browserJsonPath); os.IsNotExist(err) {
			fmt.Printf("   ‚ö†Ô∏è  Skipping '%s' - browser.json not found\n", envName)
			skippedEnvs = append(skippedEnvs, envName)
			continue
		}

		// Process the browser.json file
		if err := processEnvironment(envName, browserJsonPath, baseDir); err != nil {
			fmt.Printf("   ‚ùå Error processing '%s': %v\n", envName, err)
			errorEnvs = append(errorEnvs, envName)
		} else {
			fmt.Printf("   ‚úÖ Successfully processed '%s'\n", envName)
			processedEnvs = append(processedEnvs, envName)
		}
	}

	// Print summary
	fmt.Printf("\n" + strings.Repeat("=", 60) + "\n")
	fmt.Printf("üìä PROCESSING SUMMARY\n")
	fmt.Printf(strings.Repeat("=", 60) + "\n")
	
	if len(processedEnvs) > 0 {
		fmt.Printf("‚úÖ Successfully processed (%d): %s\n", len(processedEnvs), strings.Join(processedEnvs, ", "))
	}
	
	if len(skippedEnvs) > 0 {
		fmt.Printf("‚ö†Ô∏è  Skipped (%d): %s\n", len(skippedEnvs), strings.Join(skippedEnvs, ", "))
	}
	
	if len(errorEnvs) > 0 {
		fmt.Printf("‚ùå Failed (%d): %s\n", len(errorEnvs), strings.Join(errorEnvs, ", "))
	}

	if len(processedEnvs) == 0 {
		return fmt.Errorf("no environments were successfully processed")
	}

	return nil
}

// ... [processEnvironment function remains unchanged] ...

// ... [ensureDirectoryExists function remains unchanged] ...

// ... [handleEnvVarsFile function remains unchanged] ...

// ... [updateEnvVarsFile function remains unchanged] ...

// ... [readConfigFile function remains unchanged] ...

// ... [createTemplate function remains unchanged] ...

// ... [generateScript function remains unchanged] ...

var (
	rootCmd = &cobra.Command{
		Use:   "vpe",
		Short: "VPE CLI Tool",
		Long:  `VPE CLI Tool for performance testing and validation`,
		Example: `  vpe k6 browser -p /path/to/config/folder
  vpe k6 swagger -p /path/to/swagger/file`,
	}

	k6Cmd = &cobra.Command{
		Use:   "k6",
		Short: "K6 related commands",
	}
)

func init() {
	k6Cmd.AddCommand(k6BrowserCmd)
	rootCmd.AddCommand(k6Cmd)

	k6BrowserCmd.Flags().StringVarP(&browserFolderPath, "path", "p", "", "Path to the folder containing browser configurations")
	k6BrowserCmd.MarkFlagRequired("path")
}

func main() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
