package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/spf13/cobra"
)

// ... [TestConfig and Config structs remain unchanged] ...

// ... [k6Template constant remains unchanged] ...

var browserFolderPath string

func ValidateBrowserAndFiles(baseDir string) error {
	// ... [implementation remains unchanged] ...
}

// ... [processEnvironment function remains unchanged] ...

// ... [ensureDirectoryExists function remains unchanged] ...

// ... [handleEnvVarsFile function remains unchanged] ...

// ... [updateEnvVarsFile function remains unchanged] ...

// ... [readConfigFile function remains unchanged] ...

// ... [createTemplate function remains unchanged] ...

// ... [generateScript function remains unchanged] ...

var (
	rootCmd = &cobra.Command{
		Use:   "vpe",
		Short: "VPE CLI Tool",
		Long:  `VPE CLI Tool for performance testing and validation`,
		Example: `  vpe k6 browser -p /path/to/config/folder
  vpe k6 swagger -p /path/to/swagger/file`,
	}

	k6Cmd = &cobra.Command{
		Use:   "k6",
		Short: "K6 related commands",
	}

	k6BrowserCmd = &cobra.Command{
		Use:   "browser",
		Short: "Validate browser json file in Config folder and generate k6 scripts",
		Long: `This command validates browser files in the Config folder,
generates k6 script for each environment, and creates a summary report.`,
		Example: "vpe k6 browser -p /path/to/config/folder",
		Run: func(cmd *cobra.Command, args []string) {
			if browserFolderPath == "" {
				fmt.Println("Error: please provide a folder path using the -p flag")
				os.Exit(1)
			}

			fmt.Printf("üöÄ K6 Browser Test Generator\n")
			fmt.Printf(strings.Repeat("=", 60) + "\n")

			err := ValidateBrowserAndFiles(browserFolderPath)
			if err != nil {
				fmt.Printf("\n‚ùå Validation failed: %v\n", err)
				fmt.Printf("\nüí° TROUBLESHOOTING TIPS:\n")
				fmt.Printf("   ‚Ä¢ Ensure directory '%s' exists\n", browserFolderPath)
				fmt.Printf("   ‚Ä¢ Check that environment folders contain 'browser.json' files\n")
				fmt.Printf("   ‚Ä¢ Verify JSON files have valid syntax\n")
				fmt.Printf("   ‚Ä¢ Ensure you have write permissions for the k6 directory\n")
				os.Exit(1)
			}

			fmt.Printf("\nüéâ Validation and k6 script generation completed successfully!\n")
			fmt.Printf("\nüìã NEXT STEPS:\n")
			fmt.Printf("   ‚Ä¢ Review generated k6 scripts in '%s/k6/'\n", browserFolderPath)
			fmt.Printf("   ‚Ä¢ Check env_vars file for browser configuration\n")
			fmt.Printf("   ‚Ä¢ Run k6 tests: k6 run <script-name>.js\n")
		},
	}
)

func init() {
	k6Cmd.AddCommand(k6BrowserCmd)
	rootCmd.AddCommand(k6Cmd)

	k6BrowserCmd.Flags().StringVarP(&browserFolderPath, "path", "p", "", "Path to the folder containing browser configurations")
	k6BrowserCmd.MarkFlagRequired("path")
}

func main() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
