
Great! Since the GTE-Large setup is successful, we can move to the next step in your project. Based on the architecture we discussed earlier, the next step is **storing the embeddings in a vector database (ChromaDB)**.

---

### **Step 4: Storing Embeddings in ChromaDB**

Now that you have successfully generated embeddings for your documents, the next step is to store these embeddings in a vector database for efficient querying. ChromaDB is a great choice for this purpose.

---

### **What We'll Do in This Step**
1. **Set up ChromaDB**: Install and initialize ChromaDB.
2. **Create a ChromaDB Collection**: A collection is where embeddings and metadata are stored.
3. **Store Embeddings**: Insert the document embeddings and metadata into the ChromaDB collection.

---

### **1. Install ChromaDB**
If you haven't already installed ChromaDB, you can do so using pip:
```bash
pip install chromadb
```

---

### **2. Initialize ChromaDB and Create a Collection**

Here’s how you can set up ChromaDB and create a collection for storing embeddings:

```python
import chromadb
from chromadb.config import Settings

# Initialize ChromaDB client
client = chromadb.Client(Settings(
    persist_directory="chroma_db",  # Directory to store the database
    chroma_db_impl="duckdb+parquet",  # Use DuckDB with Parquet for storage
))

# Create a collection (or get an existing one)
collection_name = "document_embeddings"
collection = client.get_or_create_collection(name=collection_name)
```

---

### **3. Store Embeddings in ChromaDB**

You can now store the embeddings and metadata in the ChromaDB collection. Here's an example:

```python
def store_embeddings_in_chromadb(embedded_docs, collection):
    """
    Store document embeddings and metadata in ChromaDB.

    Args:
        embedded_docs (list): List of embedded documents with metadata.
        collection: ChromaDB collection object.
    """
    for doc in embedded_docs:
        collection.add(
            documents=[doc["content"]],
            metadatas=[doc["metadata"]],
            ids=[doc["metadata"]["file_name"]],  # Use file name as the unique ID
            embeddings=[doc["embedding"]]
        )
    print(f"Stored {len(embedded_docs)} documents in ChromaDB.")

# Example usage
store_embeddings_in_chromadb(embedded_docs, collection)
```

---

### **4. Verify Stored Data**

You can verify that the embeddings and metadata have been stored correctly by querying the collection:

```python
# Retrieve all documents in the collection
results = collection.get()
print(f"Number of documents in collection: {len(results['documents'])}")
for doc, metadata in zip(results["documents"], results["metadatas"]):
    print(f"Document: {doc}")
    print(f"Metadata: {metadata}")
    print("-" * 50)
```

---

### **5. Test Script**

Here’s a complete test script for this step:

```python
from app.ingestion.ingestion import DataIngestion
from app.embedding.gte_embedding import GTEEmbeddingHandler
import chromadb
from chromadb.config import Settings

def test_chromadb_storage():
    # Step 1: Load documents
    folder_path = "data/json_files/"
    ingestion = DataIngestion(folder_path)
    documents = ingestion.load_json_files()

    # Step 2: Generate embeddings
    embedding_handler = GTEEmbeddingHandler(model_path="/path/to/gte-large")
    embedded_docs = embedding_handler.embed_documents(documents)

    # Step 3: Initialize ChromaDB
    client = chromadb.Client(Settings(
        persist_directory="chroma_db",
        chroma_db_impl="duckdb+parquet",
    ))
    collection = client.get_or_create_collection(name="document_embeddings")

    # Step 4: Store embeddings in ChromaDB
    for doc in embedded_docs:
        collection.add(
            documents=[doc["content"]],
            metadatas=[doc["metadata"]],
            ids=[doc["metadata"]["file_name"]],
            embeddings=[doc["embedding"]]
        )
    print(f"Stored {len(embedded_docs)} documents in ChromaDB.")

    # Step 5: Verify stored data
    results = collection.get()
    print(f"Number of documents in collection: {len(results['documents'])}")
    for doc, metadata in zip(results["documents"], results["metadatas"]):
        print(f"Document: {doc}")
        print(f"Metadata: {metadata}")
        print("-" * 50)

if __name__ == "__main__":
    test_chromadb_storage()
```

---

### **Next Steps**
Once the embeddings are successfully stored in ChromaDB, the next step will be **querying the vector database** to retrieve relevant documents based on user input. Let me know when you're ready to proceed!
