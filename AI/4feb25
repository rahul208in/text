
Yes, I understand your requirement. Here's a summary of what you want to achieve:

1. **Input JSON File**:
   - You have a JSON file (like the one in the image) that contains vulnerabilities with `SNYK` IDs and associated `CVE` IDs (under the `identifiers` field).
   - For example, the `SNYK` ID is `SNYK-JAVA-COMMONSIO-841101` and the associated `CVE` ID is `CVE-2021-29425`.

2. **ChromaDB Storage**:
   - Both the `SNYK` and `CVE` data are stored in **ChromaDB** as embeddings.
   - The `SNYK` data contains general vulnerability information, while the `CVE` data contains detailed descriptions of the vulnerabilities.

3. **Query Workflow**:
   - When querying with a `SNYK` ID, the system should:
     - Extract the associated `CVE` ID from the `SNYK` data.
     - Use the `CVE` ID to retrieve detailed information from ChromaDB.
   - When querying with a `CVE` ID, the system should directly retrieve the relevant information from ChromaDB.

4. **Summarization**:
   - The retrieved information (from both `SNYK` and `CVE` data) should be summarized using the **Mistral 7B LLM** to provide a concise and meaningful response.

5. **Output**:
   - The system should display the summarized information along with the source details.

---

### **Proposed Solution**

To implement this, we will:
1. **Store the `SNYK` and `CVE` data in ChromaDB**.
2. **Create a query processor** that:
   - Extracts the `CVE` ID from the `SNYK` data.
   - Retrieves relevant information from ChromaDB.
   - Summarizes the results using the Mistral LLM.
3. **Provide an interactive interface** for querying.

---

### **Implementation**

#### **1. Updated `main.py`**

```python
import json
from langchain.llms import LlamaCpp
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import Chroma
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate


def load_json_file(file_path):
    """Load a JSON file."""
    with open(file_path, "r") as f:
        return json.load(f)


def embed_and_store_data(data, embeddings, persist_dir):
    """Embed and store data in ChromaDB."""
    vectorstore = Chroma(persist_directory=persist_dir, embedding_function=embeddings)
    for item in data:
        text = json.dumps(item)  # Convert the JSON object to a string
        vectorstore.add_texts([text])
    return vectorstore


def retrieve_data_by_cve(cve_id, vectorstore):
    """Retrieve data from ChromaDB using a CVE ID."""
    results = vectorstore.similarity_search(cve_id)
    return [json.loads(doc.page_content) for doc in results]


def summarize_data(llm, data):
    """Summarize the given data using an LLM."""
    combined_text = "\n".join([json.dumps(item, indent=2) for item in data])
    summarization_prompt = PromptTemplate(
        template="Summarize the following data:\n\n{text}\n\nSummary:",
        input_variables=["text"]
    )
    summarization_chain = LLMChain(llm=llm, prompt=summarization_prompt)
    summary = summarization_chain.run({"text": combined_text})
    return summary


def process_query(query, vectorstore, snyk_data, llm):
    """Process a query and return a summarized response."""
    results = []

    # Check if the query is a SNYK ID
    for item in snyk_data:
        if item.get("id") == query:
            # Extract the CVE ID from the SNYK data
            cve_id = item.get("identifiers", {}).get("CVE", [None])[0]
            if cve_id:
                # Retrieve data from ChromaDB using the CVE ID
                results = retrieve_data_by_cve(cve_id, vectorstore)
            break

    # If no results found, try searching directly with the query
    if not results:
        results = retrieve_data_by_cve(query, vectorstore)

    # Summarize the results
    if results:
        summary = summarize_data(llm, results)
        return summary
    else:
        return "No relevant data found for your query."


def main():
    # Paths and configurations
    SNYK_FILE_PATH = "./data/snyk_data.json"  # Path to the SNYK JSON file
    CVE_FILE_PATH = "./data/cve_data.json"  # Path to the CVE JSON file
    LLM_MODEL_PATH = "./models/mistral-7b"  # Path to the Mistral LLM model
    EMBEDDING_MODEL_PATH = "sentence-transformers/all-MiniLM-L6-v2"  # GTE embedding model
    CHROMA_DB_DIR = "./chromadb"  # Directory for ChromaDB

    # Load JSON files
    print("Loading JSON files...")
    snyk_data = load_json_file(SNYK_FILE_PATH)
    cve_data = load_json_file(CVE_FILE_PATH)

    # Initialize the LLM
    print("Initializing the LLM...")
    llm = LlamaCpp(
        model_path=LLM_MODEL_PATH,
        temperature=0.7,
        max_tokens=2000,
        top_p=0.9,
        verbose=True
    )

    # Initialize the embedding model
    print("Initializing the embedding model...")
    embeddings = HuggingFaceEmbeddings(
        model_name=EMBEDDING_MODEL_PATH,
        model_kwargs={'device': 'cpu'}
    )

    # Embed and store data in ChromaDB
    print("Embedding and storing data in ChromaDB...")
    vectorstore = embed_and_store_data(snyk_data + cve_data, embeddings, CHROMA_DB_DIR)

    # Interactive query loop
    print("\nReady for queries!")
    while True:
        query = input("\nEnter your query (SNYK ID, CVE ID, or keyword) or 'quit' to exit: ")
        if query.lower() == "quit":
            break

        print("\nProcessing your query...")
        response = process_query(query, vectorstore, snyk_data, llm)
        print("\n=== Summary ===")
        print(response)


if __name__ == "__main__":
    main()
```

---

### **2. Example JSON Files**

#### `data/snyk_data.json`
```json
[
    {
        "id": "SNYK-JAVA-COMMONSIO-841101",
        "identifiers": {
            "CVE": ["CVE-2021-29425"]
        },
        "description": "Uncontrolled Resource Consumption in Apache Commons IO."
    }
]
```

#### `data/cve_data.json`
```json
[
    {
        "CVE": "CVE-2021-29425",
        "details": "This CVE affects Apache Commons IO versions 2.4 to 2.6 and allows remote attackers to cause a denial of service."
    }
]
```

---

### **How It Works**

1. **Data Storage**:
   - Both `SNYK` and `CVE` data are embedded and stored in ChromaDB.

2. **Query Processing**:
   - If the query is a `SNYK` ID, the system extracts the associated `CVE` ID and retrieves detailed information from ChromaDB.
   - If the query is a `CVE` ID, the system directly retrieves the relevant information from ChromaDB.

3. **Summarization**:
   - The retrieved data is summarized using the Mistral LLM.

4. **Interactive Querying**:
   - The user can query the system with a `SNYK` ID, `CVE` ID, or a general keyword.

---

### **Example Query**

#### Input:
```
SNYK-JAVA-COMMONSIO-841101
```

#### Output:
```
=== Summary ===
The vulnerability CVE-2021-29425 affects Apache Commons IO versions 2.4 to 2.6. It allows remote attackers to cause a denial of service due to uncontrolled resource consumption.
```

---

Let me know if you need further clarification or additional features!
