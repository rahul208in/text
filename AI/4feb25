
### **Analysis of Errors**

From the provided logs and screenshots, here are the key issues:

---

#### **1. `AttributeError: 'list' object has no attribute 'get'`**
- **Cause**: The code assumes that the JSON files are dictionaries with a `vulnerabilities` key, but some files are lists or have a different structure.
- **Fix**: Update the code to handle both dictionaries and lists. Add checks to ensure the correct structure is processed.

---

#### **2. `TypeError: Object of type Document is not JSON serializable`**
- **Cause**: The `summarize_large_data` function is trying to serialize objects of type `Document` (likely returned by ChromaDB) directly into JSON, which is not supported.
- **Fix**: Extract the `page_content` or relevant fields from the `Document` objects before serialization.

---

#### **3. `ValueError: Requested tokens exceed context window`**
- **Cause**: The input text to the LLM exceeds the maximum token limit.
- **Fix**: Truncate or split the input into smaller chunks that fit within the LLM's context window.

---

#### **4. Deprecation Warning for `Chroma`**
- **Cause**: The `Chroma` class is deprecated in `langchain`. The updated `langchain_chroma` package should be used.
- **Fix**: Update the import statement and install the new package.

---

### **Proposed Fixes**

#### **1. Handle JSON Structure Properly**
Update the `embed_and_store_data` function to handle both dictionaries and lists.

```python
def embed_and_store_data(json_files, embeddings, persist_dir):
    """Embed and store data in ChromaDB."""
    from langchain_chroma import Chroma  # Use the updated package
    vectorstore = Chroma(persist_directory=persist_dir, embedding_function=embeddings)

    for file_path in json_files:
        print(f"Processing file: {file_path}")
        with open(file_path, "r") as f:
            data = json.load(f)
            if isinstance(data, dict):
                # Handle dictionary structure
                for item in data.get("vulnerabilities", []):
                    text = json.dumps(item)
                    vectorstore.add_texts([text])
            elif isinstance(data, list):
                # Handle list structure
                for item in data:
                    text = json.dumps(item)
                    vectorstore.add_texts([text])
            else:
                print(f"Skipping unsupported structure in file: {file_path}")
    return vectorstore
```

---

#### **2. Fix `TypeError` for `Document` Objects**
Extract the `page_content` or relevant fields from the `Document` objects before summarization.

```python
def summarize_large_data(llm, data, chunk_size=512):
    """Summarize large data in chunks."""
    # Extract content from Document objects
    combined_text = "\n".join([item.page_content for item in data])
    chunks = [combined_text[i:i+chunk_size] for i in range(0, len(combined_text), chunk_size)]
    summaries = []
    for chunk in chunks:
        prompt = f"Summarize the following data:\n\n{chunk}\n\nSummary:"
        summaries.append(llm.invoke(prompt))
    return " ".join(summaries)
```

---

#### **3. Handle Large Input for LLM**
Truncate or split the input into smaller chunks to fit within the LLM's context window.

```python
def truncate_text(text, max_tokens=512):
    """Truncate text to fit within the LLM's context window."""
    return text[:max_tokens]

def summarize_data(llm, data):
    """Summarize the given data using an LLM."""
    combined_text = "\n".join([item.page_content for item in data])
    truncated_text = truncate_text(combined_text, max_tokens=512)
    summarization_prompt = f"Summarize the following data:\n\n{truncated_text}\n\nSummary:"
    return llm.invoke(summarization_prompt)
```

---

#### **4. Update `Chroma` Import**
Replace the deprecated `Chroma` class with the updated version.

```python
from langchain_chroma import Chroma
```

Ensure the package is installed:
```bash
pip install -U langchain-chroma
```

---

### **Updated Code**

#### **`vector_store.py`**
```python
import os
import json
from langchain_chroma import Chroma

def embed_and_store_data(json_files, embeddings, persist_dir):
    """Embed and store data in ChromaDB."""
    vectorstore = Chroma(persist_directory=persist_dir, embedding_function=embeddings)

    for file_path in json_files:
        print(f"Processing file: {file_path}")
        with open(file_path, "r") as f:
            data = json.load(f)
            if isinstance(data, dict):
                for item in data.get("vulnerabilities", []):
                    text = json.dumps(item)
                    vectorstore.add_texts([text])
            elif isinstance(data, list):
                for item in data:
                    text = json.dumps(item)
                    vectorstore.add_texts([text])
            else:
                print(f"Skipping unsupported structure in file: {file_path}")
    return vectorstore
```

---

#### **`main.py`**
```python
import os
from langchain.llms import LlamaCpp
from langchain.embeddings import HuggingFaceEmbeddings
from database.vector_store import embed_and_store_data
import config

def summarize_large_data(llm, data, chunk_size=512):
    """Summarize large data in chunks."""
    combined_text = "\n".join([item.page_content for item in data])
    chunks = [combined_text[i:i+chunk_size] for i in range(0, len(combined_text), chunk_size)]
    summaries = []
    for chunk in chunks:
        prompt = f"Summarize the following data:\n\n{chunk}\n\nSummary:"
        summaries.append(llm.invoke(prompt))
    return " ".join(summaries)

def main():
    # Load JSON files
    json_files = [os.path.join(config.JSON_FILES_DIR, f) for f in os.listdir(config.JSON_FILES_DIR) if f.endswith(".json")]

    # Initialize the LLM
    llm = LlamaCpp(model_path=config.LLM_MODEL_PATH, temperature=0.7, max_tokens=2000, top_p=0.9, verbose=True)

    # Initialize the embedding model
    embeddings = HuggingFaceEmbeddings(model_name=config.EMBEDDING_MODEL_PATH, model_kwargs={"device": "cpu"})

    # Embed and store data in ChromaDB
    vectorstore = embed_and_store_data(json_files, embeddings, config.CHROMA_DB_DIR)

    # Interactive query loop
    while True:
        query = input("Enter your query (CVE ID or keyword) or 'quit' to exit: ")
        if query.lower() == "quit":
            break
        results = vectorstore.similarity_search(query, k=5)
        if results:
            summary = summarize_large_data(llm, results)
            print(f"Summary: {summary}")
        else:
            print("No relevant data found for your query.")

if __name__ == "__main__":
    main()
```

---

### **Testing Steps**

1. **Verify Data Loading**
   - Run the program and ensure all JSON files are processed without errors.
   - Check the debug output for the number of documents in ChromaDB.

2. **Test Querying**
   - Query valid CVE IDs and keywords to ensure relevant data is retrieved.

3. **Handle Large Input**
   - Test with large datasets to confirm that the input is truncated or chunked properly.

---

Let me know if you encounter further issues!
