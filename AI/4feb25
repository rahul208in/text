
### **Updated Requirements**

Based on your updated requirements, the system should:
1. **Exact Match Search**:
   - If the query is a `SNYK ID`, find the associated `CVE ID` and retrieve relevant data for both.
   - If the query is a `CVE ID`, find the associated `SNYK ID` and retrieve relevant data for both.
   - If the query is a keyword or sentence, search for relevant `CVE IDs` and `SNYK IDs` and provide a summary.

2. **Summarization**:
   - Use the LLM to generate a **brief summary** of the results.
   - Ensure the summary includes the `CVE ID`, `SNYK ID`, and a concise description.

---

### **Proposed Solution**

#### **Key Features**
1. **Exact Match and Related Data Retrieval**:
   - Perform an exact match search for `SNYK ID` or `CVE ID`.
   - If found, retrieve all related data (e.g., `CVE ID`, `SNYK ID`, and description).
   - If the query is a keyword or sentence, perform a similarity search and retrieve relevant data.

2. **Summarization**:
   - Use the LLM to summarize the retrieved data.
   - Ensure the summary is concise and includes the `CVE ID`, `SNYK ID`, and description.

3. **Improved Query Handling**:
   - Handle different query types (`SNYK ID`, `CVE ID`, or keyword).
   - Ensure the system gracefully handles cases where no results are found.

---

### **Updated Code Implementation**

#### **`main.py`**
```python
import os
from langchain.llms import LlamaCpp
from models.model_loader import CustomEmbeddings
from database.vector_store import embed_and_store_data
from utils.json_processor import load_all_json_files
import config

def exact_match_search(query, json_files):
    """Perform an exact match search in the JSON files."""
    results = []
    for file in json_files:
        if isinstance(file, dict) and "vulnerabilities" in file:
            for item in file["vulnerabilities"]:
                if query in item.values():
                    results.append(item)
        elif isinstance(file, list):
            for item in file:
                if query in item.values():
                    results.append(item)
    return results

def summarize_data(llm, data):
    """Summarize the retrieved data using the LLM."""
    # Extract relevant fields for summarization
    summaries = []
    for item in data:
        cve_id = item.get("CVE ID", "N/A")
        snyk_id = item.get("id", "N/A")
        description = item.get("title", "No description available.")
        summaries.append(f"CVE ID: {cve_id}\nSNYK ID: {snyk_id}\nDescription: {description}")
    
    # Combine summaries and pass to the LLM for a concise summary
    combined_text = "\n\n".join(summaries)
    prompt = f"Summarize the following data concisely:\n\n{combined_text}\n\nSummary (max 50 words):"
    return llm.invoke(prompt)

def process_query(query, vectorstore, json_files, llm):
    """Process the user query and return results."""
    # Check for exact matches
    exact_matches = exact_match_search(query, json_files)
    if exact_matches:
        print("\nExact matches found. Summarizing results...")
        return summarize_data(llm, exact_matches)

    # Perform similarity search if no exact matches
    print("\nNo exact matches found. Performing similarity search...")
    results = vectorstore.similarity_search(query, k=5)
    if results:
        # Extract page content from results
        data = [result.page_content for result in results]
        return summarize_data(llm, data)
    
    return "No relevant data found for your query."

def main():
    # Load JSON files
    print("Loading JSON files...")
    json_files = load_all_json_files(config.JSON_FILES_DIR)

    # Initialize the LLM
    print("Initializing the LLM...")
    llm = LlamaCpp(model_path=config.LLM_MODEL_PATH, temperature=0.7, max_tokens=200, top_p=0.9, verbose=True)

    # Initialize the embedding model
    print("Initializing the embedding model...")
    embeddings = CustomEmbeddings(config.EMBEDDING_MODEL_PATH)

    # Embed and store data in ChromaDB
    print("Embedding and storing data in ChromaDB...")
    vectorstore = embed_and_store_data(json_files, embeddings, config.CHROMA_DB_DIR)
    print("Data embedding completed successfully!")

    # Interactive query loop
    print("\nReady for queries!")
    while True:
        query = input("Enter your query (SNYK ID, CVE ID, or keyword) or 'quit' to exit: ")
        if query.lower() == "quit":
            break

        print("\nProcessing your query...")
        summary = process_query(query, vectorstore, json_files, llm)
        print(f"\nSummary:\n{summary}")

if __name__ == "__main__":
    main()
```

---

#### **`database/vector_store.py`**
```python
from langchain_chroma import Chroma
import json

def embed_and_store_data(json_files, embeddings, persist_dir):
    """Embed and store data in ChromaDB."""
    vectorstore = Chroma(persist_directory=persist_dir, embedding_function=embeddings)
    for file in json_files:
        if isinstance(file, dict) and "vulnerabilities" in file:
            for item in file["vulnerabilities"]:
                text = json.dumps(item)  # Convert the JSON object to a string
                vectorstore.add_texts([text])
        elif isinstance(file, list):
            for item in file:
                text = json.dumps(item)  # Convert the JSON object to a string
                vectorstore.add_texts([text])
        else:
            text = json.dumps(file)  # Convert the JSON object to a string
            vectorstore.add_texts([text])
    return vectorstore
```

---

#### **`models/model_loader.py`**
```python
from sentence_transformers import SentenceTransformer

class CustomEmbeddings:
    """Custom wrapper for SentenceTransformer to add embed_query and embed_documents methods."""
    def __init__(self, model_path: str):
        self.model = SentenceTransformer(model_path)

    def embed_query(self, query: str):
        return self.model.encode(query, convert_to_tensor=False).tolist()

    def embed_documents(self, documents: list):
        return [self.model.encode(doc, convert_to_tensor=False).tolist() for doc in documents]
```

---

### **Key Features**

1. **Exact Match Search**:
   - Searches for exact matches in the JSON files.
   - Retrieves all related data (e.g., `CVE ID`, `SNYK ID`, and description).

2. **Similarity Search**:
   - If no exact matches are found, performs a similarity search using ChromaDB.

3. **Summarization**:
   - Uses the LLM to generate a concis
