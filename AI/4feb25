
The error occurs because the `embed_and_store_data` function in `vector_store.py` assumes that each JSON file is a dictionary with a `vulnerabilities` key. However, some JSON files may not have this structure, or the file itself may be a list. Let's fix this issue by adding proper checks and handling for different JSON structures.

---

### **Updated `vector_store.py`**

Here is the corrected version of `vector_store.py`:

```python
from langchain_chroma import Chroma
import json
from typing import List, Dict, Any


def embed_and_store_data(json_files: List[Any], embeddings, persist_dir: str) -> Chroma:
    """Embed and store data in ChromaDB."""
    vectorstore = Chroma(persist_directory=persist_dir, embedding_function=embeddings)

    for file in json_files:
        # Check if the file is a dictionary
        if isinstance(file, dict):
            # If the file has a "vulnerabilities" key, process it
            if "vulnerabilities" in file:
                for item in file["vulnerabilities"]:
                    text = json.dumps(item)  # Convert the JSON object to a string
                    vectorstore.add_texts([text])
            else:
                # If no "vulnerabilities" key, embed the entire file
                text = json.dumps(file)
                vectorstore.add_texts([text])

        # If the file is a list, process each element
        elif isinstance(file, list):
            for item in file:
                text = json.dumps(item)  # Convert the JSON object to a string
                vectorstore.add_texts([text])

        # If the file is neither a dict nor a list, skip it
        else:
            print(f"Skipping unsupported JSON structure: {file}")

    return vectorstore
```

---

### **Explanation of Fixes**

1. **Check for JSON Structure**:
   - If the file is a dictionary:
     - Check for the `vulnerabilities` key and process its contents.
     - If the `vulnerabilities` key is missing, embed the entire dictionary.
   - If the file is a list, process each element in the list.
   - If the file is neither a dictionary nor a list, skip it.

2. **Handle Missing Keys**:
   - If a JSON file does not have a `vulnerabilities` key, the entire file is embedded as a single text.

3. **Skip Unsupported Structures**:
   - If the JSON file is not a dictionary or a list, it is skipped with a warning message.

---

### **Updated `main.py`**

Ensure that the `main.py` file uses the updated `embed_and_store_data` function. Here's the relevant part of `main.py`:

```python
import sys
import os
import contextlib
from langchain.llms import LlamaCpp
from langchain.embeddings import HuggingFaceEmbeddings
from utils.json_processor import load_all_json_files
from database.vector_store import embed_and_store_data
import config


@contextlib.contextmanager
def suppress_stdout_stderr():
    """Context manager to suppress stdout and stderr."""
    stdout = sys.stdout
    stderr = sys.stderr
    null_device = open(os.devnull, 'w')
    try:
        sys.stdout = null_device
        sys.stderr = null_device
        yield
    finally:
        sys.stdout = stdout
        sys.stderr = stderr
        null_device.close()


def main():
    # Load JSON files
    print("Loading JSON files...")
    json_files = load_all_json_files(config.JSON_FILES_DIR)

    # Initialize the LLM
    print("Initializing the LLM...")
    llm = LlamaCpp(
        model_path=config.LLM_MODEL_PATH,
        temperature=0.7,
        max_tokens=2000,
        top_p=0.9,
        verbose=True
    )

    # Initialize the embedding model
    print("Initializing the embedding model...")
    embeddings = HuggingFaceEmbeddings(
        model_name=config.EMBEDDING_MODEL_PATH,
        model_kwargs={'device': 'cpu'}
    )

    # Embed and store data in ChromaDB
    print("Embedding and storing data in ChromaDB...")
    with suppress_stdout_stderr():
        vectorstore = embed_and_store_data(json_files, embeddings, config.CHROMA_DB_DIR)

    print("Data embedding completed successfully!")

    # Interactive query loop
    print("\nReady for queries!")
    while True:
        query = input("\nEnter your query (SNYK ID, CVE ID, or keyword) or 'quit' to exit: ")
        if query.lower() == "quit":
            break

        print("\nProcessing your query...")
        # Add your query processing logic here
        print("\n=== Summary ===")
        print("Query processing not implemented yet.")


if __name__ == "__main__":
    main()
```

---

### **Testing the Fix**

1. **Test with JSON Files**:
   - Place JSON files with different structures (e.g., with and without `vulnerabilities`) in the `data/` directory.
   - Run the script and ensure that all valid data is embedded into ChromaDB.

2. **Check for Warnings**:
   - If a JSON file has an unsupported structure, the script should print a warning and skip the file.

3. **Suppress Output**:
   - Ensure that the `suppress_stdout_stderr` context manager suppresses unnecessary output during embedding.

---

### **Expected Output**

- For JSON files with a `vulnerabilities` key:
  - Each vulnerability is embedded into ChromaDB.
- For JSON files without a `vulnerabilities` key:
  - The entire file is embedded as a single text.
- For unsupported JSON structures:
  - A warning is printed, and the file is skipped.

---

Let me know if you encounter any further issues!
