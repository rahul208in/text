
Understood! You want the system to:

1. **Search by any keyword** across all JSON files in the `data/` directory.
2. **Handle SNYK IDs**:
   - If a SNYK ID is provided, extract the associated CVE(s) from the `identifiers` field.
   - Use the CVE(s) to find related data in other JSON files.
3. **Summarize and return results**:
   - Retrieve all relevant information (from SNYK, CVE, or keyword search).
   - Summarize the results using the Mistral LLM.

The file structure remains the same as in the second image, and the `config.py` file will have `JSON_FILES_DIR = "data"`.

---

### **Updated Implementation**

#### **1. `config.py`**
This file remains unchanged except for the `JSON_FILES_DIR` variable.

```python
# config.py

# Directory containing JSON files
JSON_FILES_DIR = "data"

# Path to the Mistral 7B LLM model
LLM_MODEL_PATH = "./models/mistral-7b"

# Path to the embedding model
EMBEDDING_MODEL_PATH = "sentence-transformers/all-MiniLM-L6-v2"

# Path to the ChromaDB persistence directory
CHROMA_DB_DIR = "./cache/chroma_db"
```

---

#### **2. `utils/json_processor.py`**
This file is updated to handle keyword searches and SNYK-to-CVE mapping.

```python
import os
import json
from typing import List, Dict, Any


def load_all_json_files(directory: str) -> List[Dict[str, Any]]:
    """Load all JSON files from a directory."""
    json_data = []
    for filename in os.listdir(directory):
        if filename.endswith(".json"):
            with open(os.path.join(directory, filename), "r") as f:
                data = json.load(f)
                json_data.append(data)
    return json_data


def find_data_by_keyword(keyword: str, json_files: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """Search for any keyword in all JSON files."""
    results = []
    for file in json_files:
        for item in file.get("vulnerabilities", []):
            if keyword.lower() in json.dumps(item).lower():
                results.append(item)
    return results


def find_cve_from_snyk(snyk_id: str, json_files: List[Dict[str, Any]]) -> List[str]:
    """Find CVE(s) associated with a given SNYK ID."""
    cve_ids = []
    for file in json_files:
        for item in file.get("vulnerabilities", []):
            if item.get("id") == snyk_id:
                cve_ids.extend(item.get("identifiers", {}).get("CVE", []))
    return cve_ids
```

---

#### **3. `database/vector_store.py`**
This file remains the same, as it handles embedding and storing data in ChromaDB.

```python
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import Chroma
from typing import List, Dict, Any
import json


def embed_and_store_data(json_files: List[Dict[str, Any]], embeddings, persist_dir: str) -> Chroma:
    """Embed and store data in ChromaDB."""
    vectorstore = Chroma(persist_directory=persist_dir, embedding_function=embeddings)
    for file in json_files:
        for item in file.get("vulnerabilities", []):
            text = json.dumps(item)  # Convert the JSON object to a string
            vectorstore.add_texts([text])
    return vectorstore
```

---

#### **4. `main.py`**
This file is updated to handle keyword searches and SNYK-to-CVE mapping.

```python
import os
from langchain.llms import LlamaCpp
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import Chroma
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from utils.json_processor import load_all_json_files, find_data_by_keyword, find_cve_from_snyk
from database.vector_store import embed_and_store_data
import config


def summarize_data(llm, data):
    """Summarize the given data using an LLM."""
    combined_text = "\n".join([json.dumps(item, indent=2) for item in data])
    summarization_prompt = PromptTemplate(
        template="Summarize the following data:\n\n{text}\n\nSummary:",
        input_variables=["text"]
    )
    summarization_chain = LLMChain(llm=llm, prompt=summarization_prompt)
    summary = summarization_chain.run({"text": combined_text})
    return summary


def process_query(query, vectorstore, json_files, llm):
    """Process a query and return a summarized response."""
    results = []

    # Check if the query is a SNYK ID
    cve_ids = find_cve_from_snyk(query, json_files)
    if cve_ids:
        for cve_id in cve_ids:
            # Search for CVE data in JSON files
            cve_results = find_data_by_keyword(cve_id, json_files)
            results.extend(cve_results)

    # If no CVE IDs found, treat the query as a general keyword
    if not results:
        results = find_data_by_keyword(query, json_files)

    # Summarize the results
    if results:
        summary = summarize_data(llm, results)
        return summary
    else:
        return "No relevant data found for your query."


def main():
    # Load JSON files
    print("Loading JSON files...")
    json_files = load_all_json_files(config.JSON_FILES_DIR)

    # Initialize the LLM
    print("Initializing the LLM...")
    llm = LlamaCpp(
        model_path=config.LLM_MODEL_PATH,
        temperature=0.7,
        max_tokens=2000,
        top_p=0.9,
        verbose=True
    )

    # Initialize the embedding model
    print("Initializing the embedding model...")
    embeddings = HuggingFaceEmbeddings(
        model_name=config.EMBEDDING_MODEL_PATH,
        model_kwargs={'device': 'cpu'}
    )

    # Embed and store data in ChromaDB
    print("Embedding and storing data in ChromaDB...")
    vectorstore = embed_and_store_data(json_files, embeddings, config.CHROMA_DB_DIR)

    # Interactive query loop
    print("\nReady for queries!")
    while True:
        query = input("\nEnter your query (SNYK ID, CVE ID, or keyword) or 'quit' to exit: ")
        if query.lower() == "quit":
            break

        print("\nProcessing your query...")
        response = process_query(query, vectorstore, json_files, llm)
        print("\n=== Summary ===")
        print(response)


if __name__ == "__main__":
    main()
```

---

### **How It Works**

1. **Data Loading**:
   - All JSON files in the `data/` directory are loaded.

2. **Query Processing**:
   - If the query is a SNYK ID:
     - Extract associated CVE(s) from the `identifiers` field.
     - Search for data related to the CVE(s) in all JSON files.
   - If the query is a general keyword:
     - Search for the keyword in all JSON files.

3. **Summarization**:
   - The retrieved data is summarized using the Mistral LLM.

4. **Interactive Querying**:
   - The user can query the system with a SNYK ID, CVE ID, or any keyword.

---

### **Example Queries**

#### Query 1: SNYK ID
Input:
```
SNYK-JAVA-COMMONSIO-841101
```

Output:
```
=== Summary ===
The vulnerability CVE-2021-29425 affects Apache Commons IO versions 2.4 to 2.6. It allows remote attackers to cause a denial of service due to uncontrolled resource consumption.
```

#### Query 2: Keyword
Input:
```
denial of service
```

Output:
```
=== Summary ===
The vulnerability CVE-2021-29425 affects Apache Commons IO versions 2.4 to 2.6. It allows remote attackers to cause a denial of service due to uncontrolled resource consumption.
```

---

Let me know if you need further clarification or additional features!
