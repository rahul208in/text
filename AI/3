
To avoid the migration issues and start fresh with ChromaDB, we will set up everything from scratch using the **latest version of ChromaDB**. This will ensure compatibility with the new architecture and avoid the deprecated configuration errors.

---

### **Steps to Start Fresh with ChromaDB**

#### **Step 1: Clean Up Old ChromaDB Data**
If you have any old ChromaDB data, delete the directory where it was stored. For example:
```bash
rm -rf chroma_db
```

This ensures that we start with a clean slate.

---

#### **Step 2: Install the Latest Version of ChromaDB**
Install the latest version of ChromaDB to ensure compatibility with the new architecture:
```bash
pip install --upgrade chromadb
```

---

#### **Step 3: Update Your ChromaDB Client Initialization**
The new ChromaDB client initialization is simpler and does not use the `Settings` class. Update your code to use the new client initialization.

Here’s how you can initialize the ChromaDB client:

```python
import chromadb

# Initialize ChromaDB client
client = chromadb.Client(persist_directory="chroma_db")  # Specify the directory to store the database
```

---

#### **Step 4: Create a New ChromaDB Handler**
Create a new file `app/chromadb_handler.py` to handle all ChromaDB-related operations. This will make your project modular and reusable.

Here’s the code for `chromadb_handler.py`:

```python
import os
import chromadb


class ChromaDBHandler:
    def __init__(self, persist_directory="cache/chroma_db"):
        """
        Initialize ChromaDB handler.

        Args:
            persist_directory (str): Directory where ChromaDB will store its data.
        """
        # Ensure the persist directory exists
        os.makedirs(persist_directory, exist_ok=True)

        # Initialize ChromaDB client
        self.client = chromadb.Client(persist_directory=persist_directory)

    def create_collection(self, collection_name="document_embeddings"):
        """
        Create or get a ChromaDB collection.

        Args:
            collection_name (str): Name of the collection.

        Returns:
            Collection: ChromaDB collection object.
        """
        return self.client.get_or_create_collection(name=collection_name)

    def store_embeddings(self, embedded_docs, collection_name="document_embeddings"):
        """
        Store embeddings in ChromaDB.

        Args:
            embedded_docs (list): List of documents with embeddings.
            collection_name (str): Name of the collection.

        Returns:
            int: Number of documents stored.
        """
        collection = self.create_collection(collection_name)

        for doc in embedded_docs:
            collection.add(
                documents=[doc["content"]],
                metadatas=[doc["metadata"]],
                ids=[str(doc["metadata"]["file_name"])],  # Ensure ID is a string
                embeddings=[doc["embedding"].tolist()]  # Convert numpy array to list
            )

        return len(embedded_docs)

    def query_collection(self, collection_name="document_embeddings"):
        """
        Query all documents from a collection.

        Args:
            collection_name (str): Name of the collection to query.

        Returns:
            dict: Collection results.
        """
        collection = self.client.get_collection(collection_name)
        return collection.get()
```

---

#### **Step 5: Create a Script to Store Embeddings**
Create a script `store_embeddings.py` in the root directory to tie everything together.

Here’s the code for `store_embeddings.py`:

```python
from app.ingestion.ingestion import DataIngestion
from app.embedding.gte_embedding import GTEEmbeddingHandler
from app.chromadb_handler import ChromaDBHandler


def main():
    # Step 1: Load documents
    print("Loading documents...")
    folder_path = "data/json_files/"
    ingestion = DataIngestion(folder_path)
    documents = ingestion.load_json_files()
    print(f"Loaded {len(documents)} documents.")

    # Step 2: Generate embeddings
    print("\nGenerating embeddings...")
    embedding_handler = GTEEmbeddingHandler()
    embedded_docs = embedding_handler.embed_documents(documents)
    print(f"Generated embeddings for {len(embedded_docs)} documents.")

    # Step 3: Store embeddings in ChromaDB
    print("\nStoring embeddings in ChromaDB...")
    chroma_handler = ChromaDBHandler()
    num_stored = chroma_handler.store_embeddings(embedded_docs)
    print(f"Stored {num_stored} documents in ChromaDB.")

    # Step 4: Verify stored data
    print("\nVerifying stored data...")
    results = chroma_handler.query_collection()
    print(f"Number of documents in collection: {len(results['documents'])}")
    for i, (doc, metadata) in enumerate(zip(results["documents"], results["metadatas"])):
        if i < 3:  # Print first 3 documents as a sample
            print(f"\nDocument {i+1}:")
            print(f"Content: {doc[:100]}...")  # Show first 100 characters
            print(f"Metadata: {metadata}")
            print("-" * 50)


if __name__ == "__main__":
    main()
```

---

#### **Step 6: Run the Script**
Run the `store_embeddings.py` script to test the workflow:
```bash
python store_embeddings.py
```

---

#### **Step 7: Verify the Results**
1. Check the `cache/chroma_db` directory to ensure the database files are created.
2. Verify the console output:
   - It should show the number of documents loaded, embeddings generated, and documents stored in ChromaDB.
   - It will also print a sample of stored documents and their metadata.

---

### **Updated Project Structure**
After these changes, your project structure will look like this:

```
RAG_SYSTEM/
├── app/
│   ├── chromadb_handler.py  # New file for ChromaDB operations
│   ├── embedding/
│   │   ├── gte_embedding.py
│   │   └── test_gte_embedding.py
│   ├── ingestion/
│   │   ├── ingestion.py
│   │   └── test_ingestion.py
│   ├── __init__.py
├── cache/
│   └── chroma_db/  # ChromaDB storage directory
├── data/
│   └── json_files/
│       ├── sample1.json
│       └── sample2.json
├── venv/
├── requirements.txt
├── store_embeddings.py  # Script to run the workflow
```

---

### **Next Steps**
1. Run the `store_embeddings.py` script to test the new setup.
2. If you encounter any issues, share the error details, and I’ll help you debug further.

Let me know how it goes!
