

import { parse } from 'json2csv';
import fs from 'fs/promises';

export async function POST(req) {
  try {
    // Step 1: Extract form data natively
    const formData = await req.formData();
    
    const file = formData.get('file'); // Get the uploaded file
    const param1 = formData.get('param1'); // Get param1
    const param2 = formData.get('param2'); // Get param2

    if (!file || !param1 || !param2) {
      throw new Error('Missing required parameters or file.');
    }

    // Step 2: Read the content of the uploaded JSON file
    const fileContent = await file.text(); // Read the file content as text
    const jsonData = JSON.parse(fileContent);
    const vulnerabilities = jsonData.vulnerabilities || [];

    // Step 3: Map vulnerabilities to CSV format
    const csvData = vulnerabilities.map((vuln) => ({
      CVE: vuln.identifiers?.CVE?.[0] || '',
      'REPO URL': param1,
      PACKAGE: vuln.packageName,
      'PACKAGE VERSION': vuln.version,
      SEVERITY: vuln.severity,
      score: vuln.cvssScore || '',
      'has fixed': vuln.fixedIn?.length > 0 ? 'y' : 'n',
      'fixed version': vuln.fixedIn?.[0] || '',
      description: `${vuln.id}: ${vuln.description}`,
      'repo name': param2,
      sha256: 'commit',
      branch: 'main',
    }));

    console.log('CSV Data:', csvData); // Debugging log

    // Step 4: Convert data to CSV format
    const csv = parse(csvData, {
      fields: [
        'CVE',
        'REPO URL',
        'PACKAGE',
        'PACKAGE VERSION',
        'SEVERITY',
        'score',
        'has fixed',
        'fixed version',
        'description',
        'repo name',
        'sha256',
        'branch',
      ],
    });

    // Step 5: Return the CSV as a response
    return new Response(csv, {
      headers: {
        'Content-Type': 'text/csv',
        'Content-Disposition': 'attachment; filename=vulnerabilities.csv',
      },
    });
  } catch (error) {
    console.error('Error processing request:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'Internal Server Error' }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      }
    );
  }
}
