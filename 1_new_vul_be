

import formidable from 'formidable';
import fs from 'fs/promises';
import { parse } from 'json2csv';

export const config = {
  api: {
    bodyParser: false,
  },
};

export async function POST(req) {
  try {
    // Parse form data
    const form = new formidable.IncomingForm();
    const { fields, files } = await new Promise((resolve, reject) => {
      form.parse(req, (err, fields, files) => {
        if (err) reject(err);
        else resolve({ fields, files });
      });
    });

    const param1 = fields.param1;
    const param2 = fields.param2;

    // Read the uploaded JSON file
    const fileContent = await fs.readFile(files.file.filepath, 'utf-8');
    const jsonData = JSON.parse(fileContent);
    const vulnerabilities = jsonData.vulnerabilities || [];

    // Transform data into CSV
    const csvData = vulnerabilities.map((vuln) => ({
      CVE: vuln.identifiers?.CVE?.[0] || '',
      'REPO URL': param1,
      PACKAGE: vuln.packageName,
      'PACKAGE VERSION': vuln.version,
      SEVERITY: vuln.severity,
      score: vuln.cvssScore || '',
      'has fixed': vuln.fixedIn?.length > 0 ? 'y' : 'n',
      'fixed version': vuln.fixedIn?.[0] || '',
      description: `${vuln.id}: ${vuln.description}`,
      'repo name': param2,
      sha256: 'commit',
      branch: 'main',
    }));

    const csv = parse(csvData, {
      fields: [
        'CVE',
        'REPO URL',
        'PACKAGE',
        'PACKAGE VERSION',
        'SEVERITY',
        'score',
        'has fixed',
        'fixed version',
        'description',
        'repo name',
        'sha256',
        'branch',
      ],
    });

    // Return the CSV as a response
    return new Response(csv, {
      headers: {
        'Content-Type': 'text/csv',
        'Content-Disposition': 'attachment; filename=vulnerabilities.csv',
      },
    });
  } catch (error) {
    return new Response(JSON.stringify({ error: 'Error processing request' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}
