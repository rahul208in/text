

import { parse } from 'json2csv';
import fs from 'fs/promises';

export async function POST(req) {
  try {
    // Step 1: Extract form data natively
    const formData = await req.formData();
    
    const file = formData.get('file'); // Get the uploaded file
    const param1 = formData.get('param1'); // Get param1
    const param2 = formData.get('param2'); // Get param2

    if (!file || !param1 || !param2) {
      throw new Error('Missing required parameters or file.');
    }

    // Step 2: Read and parse the uploaded JSON file
    const fileContent = await file.text(); // Read file content as text
    const jsonData = JSON.parse(fileContent);
    const vulnerabilities = jsonData.vulnerabilities || [];

    // Step 3: Filter and map vulnerabilities to CSV format
    const filteredVulnerabilities = vulnerabilities
      .filter((vuln) => vuln.id.startsWith('SNYK')) // Ignore "snyk:lic" IDs
      .map((vuln) => ({
        CVE: vuln.identifiers?.CVE?.[0] || '',
        'REPO URL': param1,
        PACKAGE: vuln.packageName,
        'PACKAGE VERSION': vuln.version,
        SEVERITY: vuln.severity,
        score: vuln.cvssScore || '',
        'has fixed': vuln.fixedIn?.length > 0 ? 'y' : 'n',
        'fixed version': vuln.fixedIn?.join(', ') || '', // Show all fixed versions
        description: `${vuln.id}: ${vuln.description}`,
        'repo name': param2,
        sha256: 'commit',
        branch: 'main',
      }));

    console.log('Filtered CSV Data:', filteredVulnerabilities); // Debugging log

    // Step 4: Convert data to CSV format
    const csv = parse(filteredVulnerabilities, {
      fields: [
        'CVE',
        'REPO URL',
        'PACKAGE',
        'PACKAGE VERSION',
        'SEVERITY',
        'score',
        'has fixed',
        'fixed version',
        'description',
        'repo name',
        'sha256',
        'branch',
      ],
    });

    // Step 5: Return the CSV as a response
    return new Response(csv, {
      headers: {
        'Content-Type': 'text/csv',
        'Content-Disposition': 'attachment; filename=vulnerabilities.csv',
      },
    });
  } catch (error) {
    console.error('Error processing request:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'Internal Server Error' }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      }
    );
  }
}







How to create a CON definition file and submit it to a performance First, visit http://localhost:3000/.to create the app and define the build. Please ensure that version 1.0.2 is selected. This creates the app and builds the SBOM. Step 2: Get your code from SRC and use the following to create CycloneDX SBOM. order. Mysbom.json snyk sbom --format=cyclonedx1.4+json Step 3: Use this command to create a vulnerability report for the same code. The output of the snyk test is vuln.json. Step 4: To convert a vulnerability JSON file to a CSV file that is compatible with Concert, visit http://localhost:3000/vul. Give the repository name (pipename in input 2), upload vulnerability, and repository URL (purl url in input 1).JSON file. It will convert to a CSV file that is compatible with IBM Concert, which you can then download. You can now access the IBM Concert URL to log in.


