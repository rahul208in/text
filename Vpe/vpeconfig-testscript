func TestValidateVpeconfigAndFiles(t *testing.T) {
	// Create a temporary directory for test files
	tempDir, err := ioutil.TempDir("", "testvpeconfig")
	if err != nil {
		t.Fatalf("Failed to create temporary directory: %v", err)
	}
	defer os.RemoveAll(tempDir)

	// Define test data - this one will NOT cause the error
	configYML := `
RequestInputXML:
  ProdExpectedTPS: "100"
  AppdAppName: "TestApp"
  SSLRequired: false
  StartTest: true
  YkVersion: 1.0
  DL: "test@example.com"
  Space: "TestSpace"
  BitbucketURL: "http://bitbucket.com"
  Duration: 60
  VUsers: 10 # Set to a non-nil value
  MajorGcTimer: 300
  AppdTierName: "TestTier"
  AppdController: "TestController"
  HeapUsed: 1024
  MajorGc: 10
  ProxyRequired: false
  ApplnName: "TestApp"
  MicroserviceName: "TestService"
  Org: "TestOrg"
  ContainerType: "Docker"
  ResponseTime: 0.5
  SplunkURL: "http://splunk.com"
  DepEnvironment: "TestEnv"
  Swaggers:
    Domain: "http://swagger.com"
    SwaggerName: "TestSwagger"
  SplunkIndex: "TestIndex"
  CPUPercentage: 80
  ThreadGroup:
    SessionEndpoint:
      - LoopCount: 1
        HeadersFile: "headers.yml"
        APIName: "/session"
        BodyJSONs:
          BodyJson:
            - Name: "param1"
              Value: "value1"
        Method: "GET"
        ResponseString: "success"
        ThinkTime: "1s"
        Domain: "http://example.com"
        Title: "SessionEndpoint1"
        ExecuteOnce: false
        RequestInputXML: ""
        PathVariables: {}
        QueryParams: {}
        Extracter: "extracter.yml"
    Endpoint:
      - LoopCount: 2
        HeadersFile: "headers.yml"
        APIName: "/endpoint"
        BodyJSONs:
          BodyJson:
            - Name: "param2"
              Value: "value2"
        Method: "POST"
        ResponseString: "ok"
        ThinkTime: "2s"
        Domain: "http://example.com"
        Title: "Endpoint1"
        ExecuteOnce: true
        RequestInputXML: ""
        PathVariables: {}
        QueryParams: {}
        Extracter: "extracter.yml"
    ThreadLoadPercentage: 100 # Set to 100 to avoid the error
    ThreadLoop: 1
    RampTime: 10
    ExecuteOnce: false
  TestType: "smoke"
  ApiErrors: 0.1
`

	headersYML := `
headers:
  header:
    - name: "Content-Type"
      value: "application/json"
    - name: "Authorization"
      value: "Bearer token"
`

	extracterYML := `
extracter:
  regexxteact:
    - name: "token"
      type: "header"
      value: "Authorization: Bearer (.*)"
      Ordinal: "1"
    - name: "id"
      type: "body"
      value: "\"id\": (\\d+)"
      Ordinal: "1"
`

	// Create test files in the temporary directory
	err = ioutil.WriteFile(filepath.Join(tempDir, "Config.yml"), []byte(configYML), 0644)
	if err != nil {
		t.Fatalf("Failed to create Config.yml: %v", err)
	}
	err = ioutil.WriteFile(filepath.Join(tempDir, "headers.yml"), []byte(headersYML), 0644)
	if err != nil {
		t.Fatalf("Failed to create headers.yml: %v", err)
	}
	err = ioutil.WriteFile(filepath.Join(tempDir, "extracter.yml"), []byte(extracterYML), 0644)
	if err != nil {
		t.Fatalf("Failed to create extracter.yml: %v", err)
	}

	// Call the function under test
	err = ValidateVpeconfigAndFiles(tempDir)
	if err != nil {
		t.Fatalf("ValidateVpeconfigAndFiles returned an error: %v", err)
	}

	// Add assertions to validate the behavior of the function
	// For example, check if the generated k6 script file exists
	//testType := config.RequestInputXML.TestType // Get the test type from the config
	//k6ScriptFileName := filepath.Join(tempDir, fmt.Sprintf("vpe-%s-script.js", testType)) // Construct the expected file name
	//if _, err := os.Stat(k6ScriptFileName); os.IsNotExist(err) {
	//	t.Errorf("Expected k6 script file %s to be created, but it was not", k6ScriptFileName)
	//}

	// Read the generated k6 script file and check its contents
	//scriptData, err := ioutil.ReadFile(k6ScriptFileName)
	//if err != nil {
	//	t.Fatalf("Failed to read generated k6 script file: %v", err)
	//}
	//scriptContent := string(scriptData)

	// Check for specific content in the generated script
	//if !strings.Contains(scriptContent, "import http from 'k6/http';") {
	//	t.Errorf("Generated k6 script does not contain 'import http from k6/http;'")
	//}
	//if !strings.Contains(scriptContent, "export const options = {") {
	//	t.Errorf("Generated k6 script does not contain 'export const options = {'")
	//}
	//if !strings.Contains(scriptContent, "const SessionEndpoint1 = new Trend('SessionEndpoint1');") {
	//	t.Errorf("Generated k6 script does not contain 'const SessionEndpoint1 = new Trend('SessionEndpoint1');")
	//}
	//if !strings.Contains(scriptContent, "const Endpoint1 = new Trend('Endpoint1');") {
	//	t.Errorf("Generated k6 script does not contain 'const Endpoint1 = new Trend('Endpoint1');")
	//}
	//if !strings.Contains(scriptContent, "let session_res_0 = http.get(session_url_0, null, {headers: session_headers_0});") {
	//	t.Errorf("Generated k6 script does not contain 'let session_res_0 = http.get(session_url_0, null, {headers: session_headers_0});'")
	//}
	//if !strings.Contains(scriptContent, "let res_0 = http.post(url_0, null, {headers: headers_0});") {
	//	t.Errorf("Generated k6 script does not contain 'let res_0 = http.post(url_0, null, {headers: headers_0});'")
	//}

	// Optionally, validate the 'env_vars' file content
	//envVarsFilePath := filepath.Join(tempDir, "env_vars")
	//envVarsContent, err := ioutil.ReadFile(envVarsFilePath)
	//if err != nil {
	//	t.Fatalf("Failed to read env_vars file: %v", err)
	//}

	//expectedEnvVarsContent := `export ApplnName="TestApp"
	//export MicroserviceName="TestService"
	//export TestType="smoke"
	//export Dl="test@example.com"
	//`
	//if string(envVarsContent) != expectedEnvVarsContent {
	//	t.Errorf("env_vars file content does not match expected value. Got:\n%s\nExpected:\n%s", string(envVarsContent), expectedEnvVarsContent)
	//}

	// Clean up environment variables and files
	//os.Remove(envVarsFilePath)
	//os.Unsetenv("ApplnName")
	//os.Unsetenv("MicroserviceName")
	//os.Unsetenv("TestType")
	//os.Unsetenv("Dl")

	// Additional assertions can be added to validate other aspects of the function's behavior
}
