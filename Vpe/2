Hereâ€™s the Node.js script to convert a JSON file into a detailed HTML report:

### Node.js Script: `json2html_detail_report.js`
```javascript
const fs = require('fs');
const path = require('path');

// Function to generate HTML report
function generateHTMLReport(jsonFilePath, outputFilePath) {
  try {
    // Read the JSON file
    const jsonData = fs.readFileSync(jsonFilePath, 'utf8');
    const metrics = {
      http_reqs: { count: 0 },
      http_req_duration: { avg: 0, p95: 0 },
      http_req_failed: { rate: 0 },
      responseTimes: [],
    };

    // Parse JSONL data
    jsonData.split('\n').forEach((line) => {
      if (line.trim()) {
        const entry = JSON.parse(line);
        if (entry.metric === 'http_reqs') {
          metrics.http_reqs.count += 1;
        } else if (entry.metric === 'http_req_duration') {
          metrics.http_req_duration.avg = entry.data.value;
        } else if (entry.metric === 'http_req_duration{quantile:0.95}') {
          metrics.http_req_duration.p95 = entry.data.value;
        } else if (entry.metric === 'http_req_failed') {
          metrics.http_req_failed.rate = entry.data.value;
        } else if (entry.metric === 'http_req_duration' && entry.data.value) {
          metrics.responseTimes.push(entry.data.value);
        }
      }
    });

    // Generate HTML content
    const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>k6 Load Test Report</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    h1 { color: #333; }
    table { width: 100%; border-collapse: collapse; margin-top: 20px; }
    th, td { padding: 10px; border: 1px solid #ddd; text-align: left; }
    th { background-color: #f4f4f4; }
    .chart-container { margin-top: 40px; width: 80%; height: 400px; }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <h1>k6 Load Test Report</h1>
  <table>
    <tr>
      <th>Metric</th>
      <th>Value</th>
    </tr>
    <tr>
      <td>Total Requests</td>
      <td>${metrics.http_reqs.count}</td>
    </tr>
    <tr>
      <td>Average Response Time</td>
      <td>${metrics.http_req_duration.avg.toFixed(2)} ms</td>
    </tr>
    <tr>
      <td>95th Percentile Response Time</td>
      <td>${metrics.http_req_duration.p95.toFixed(2)} ms</td>
    </tr>
    <tr>
      <td>Error Rate</td>
      <td>${(metrics.http_req_failed.rate * 100).toFixed(2)}%</td>
    </tr>
  </table>

  <div class="chart-container">
    <canvas id="response-time-chart"></canvas>
  </div>

  <script>
    const ctx = document.getElementById('response-time-chart').getContext('2d');
    new Chart(ctx, {
      type: 'line',
      data: {
        labels: ${JSON.stringify(metrics.responseTimes.map((_, i) => `Request ${i + 1}`))},
        datasets: [{
          label: 'Response Time (ms)',
          data: ${JSON.stringify(metrics.responseTimes)},
          borderColor: 'rgba(75, 192, 192, 1)',
          fill: false,
        }],
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Response Time (ms)',
            },
          },
          x: {
            title: {
              display: true,
              text: 'Request Number',
            },
          },
        },
      },
    });
  </script>
</body>
</html>
`;

    // Save the HTML report
    fs.writeFileSync(outputFilePath, htmlContent);
    console.log(`HTML report generated: ${outputFilePath}`);
  } catch (error) {
    console.error('Error generating report:', error);
  }
}

// Command-line usage
if (process.argv.length < 4) {
  console.log('Usage: node json2html_detail_report.js <input-json-file> <output-html-file>');
} else {
  const jsonFilePath = process.argv[2];
  const outputFilePath = process.argv[3];
  generateHTMLReport(jsonFilePath, outputFilePath);
}
```

---

### How to Use
1. Save the script as `json2html_detail_report.js`.
2. Run the script with the input JSON file and output HTML file as arguments:
   ```bash
   node json2html_detail_report.js test_results.json html-report.html
   ```
3. Open the generated `html-report.html` file in a browser to view the report.

---

### Features of the Script
1. **Input JSON File**: Reads the k6 JSONL file (`test_results.json`).
2. **Output HTML File**: Generates a detailed HTML report (`html-report.html`).
3. **Metrics**: Displays total requests, average response time, 95th percentile response time, and error rate.
4. **Chart**: Visualizes response times using Chart.js.

Let me know if you need further assistance!
