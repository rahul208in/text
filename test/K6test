
import http from 'k6/http';
import { check, sleep } from 'k6';
import { Rate } from 'k6/metrics';

// ✅ Custom metric for failed checks ratio
export const failedCheckRate = new Rate('failed_checks_rate');

// ✅ k6 options
export const options = {
    vus: 5,
    duration: '30s',
    thresholds: {
        failed_checks_rate: ['rate<0.05'], // Fail if >5% of checks fail
    },
};

// ✅ Multiple endpoints
const BASE_URL = 'https://test-api.k6.io';
const endpoints = [
    { path: '/public/crocodiles/', method: 'GET' },
    { path: '/public/crocodiles/1/', method: 'GET' },
];

export default function () {
    for (const endpoint of endpoints) {
        const url = `${BASE_URL}${endpoint.path}`;
        let res;

        if (endpoint.method === 'GET') {
            res = http.get(url);
        } else {
            res = http.request(endpoint.method, url);
        }

        // ✅ Multiple checks
        const checkStatus = check(res, {
            [`${endpoint.path} - status is 200`]: (r) => r.status === 200,
        });

        const checkContent = check(res, {
            [`${endpoint.path} - body not empty`]: (r) => r.body.length > 0,
        });

        const checkJson = check(res, {
            [`${endpoint.path} - response is JSON`]: (r) =>
                r.headers['Content-Type'] &&
                r.headers['Content-Type'].includes('application/json'),
        });

        // ✅ Add failures to custom metric
        failedCheckRate.add(!checkStatus);
        failedCheckRate.add(!checkContent);
        failedCheckRate.add(!checkJson);

        sleep(1);
    }
}

// ✅ Custom Summary (HTML using bundle.js)
export function handleSummary(data) {
    return {
        'summary.html': htmlReport(data), // HTML report file
        stdout: textSummary(data, { indent: ' ', enableColors: true }), // Console summary
    };
}

// ✅ Import HTML & Text Summary (from bundle.js)
import { htmlReport } from './bundle.js';
import { textSummary } from 'https://jslib.k6.io/k6-summary/0.0.1/index.js';
