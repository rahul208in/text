const vscode = require('vscode');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

async function activate(context) {
    const reportProvider = new ReportProvider();
    const reportView = vscode.window.createTreeView('reportExplorer', { treeDataProvider: reportProvider });

    const refreshCommand = vscode.commands.registerCommand('extension.refreshReports', async () => {
        const statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);
        statusBar.text = 'Generating report...';
        statusBar.show();
        try {
            await generateReport(reportProvider);
            vscode.window.showInformationMessage('Report generation completed successfully.');
        } catch (error) {
            vscode.window.showErrorMessage(`Report generation failed: ${error.message}`);
        }
        statusBar.hide();
    });

    context.subscriptions.push(refreshCommand, reportView);

    async function generateReport(reportProvider) {
        const workspaceFolders = vscode.workspace.workspaceFolders;
        if (!workspaceFolders) {
            throw new Error('No workspace folder open');
        }

        const workspacePath = workspaceFolders[0].uri.fsPath;
        const packageJsonPath = path.join(workspacePath, 'package.json');
        
        if (!fs.existsSync(packageJsonPath)) {
            throw new Error('package.json not found in the workspace');
        }

        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        const dependencies = packageJson.dependencies;

        if (!dependencies) {
            throw new Error('No dependencies found in package.json');
        }

        const vscodeFolderPath = path.join(workspacePath, '.vscode');
        if (!fs.existsSync(vscodeFolderPath)) {
            fs.mkdirSync(vscodeFolderPath);
        }

        let response;
        try {
            response = await axios.post('http://1.2.3.4:/postpackage', { dependencies });
        } catch (error) {
            throw new Error(`Failed to post package: ${error.message}`);
        }

        if (!response || !response.data) {
            throw new Error('Invalid response from API');
        }

        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const jsonFileName = `${packageJson.name}-${timestamp}.json`;
        const jsonFilePath = path.join(vscodeFolderPath, jsonFileName);
        fs.writeFileSync(jsonFilePath, JSON.stringify(response.data));

        let htmlResponse;
        try {
            htmlResponse = await axios.post('http://another-api-endpoint', response.data);
        } catch (error) {
            throw new Error(`Failed to get HTML report: ${error.message}`);
        }

        if (!htmlResponse || !htmlResponse.data) {
            throw new Error('Invalid HTML response from API');
        }

        const reportFolderPath = path.join(vscodeFolderPath, 'report');
        if (!fs.existsSync(reportFolderPath)) {
            fs.mkdirSync(reportFolderPath);
        }

        const htmlFileName = `${packageJson.name}-${timestamp}.html`;
        const htmlFilePath = path.join(reportFolderPath, htmlFileName);
        fs.writeFileSync(htmlFilePath, htmlResponse.data);

        reportProvider.refresh();
    }

    vscode.commands.registerCommand('extension.openReport', openReport);

    function openReport(resourceUri) {
        const panel = vscode.window.createWebviewPanel(
            'htmlReport',
            resourceUri.path.split('/').pop(),
            vscode.ViewColumn.One,
            {}
        );

        panel.webview.html = fs.readFileSync(resourceUri.fsPath, 'utf8');
    }
}

class ReportProvider {
    constructor() {
        this._onDidChangeTreeData = new vscode.EventEmitter();
        this.onDidChangeTreeData = this._onDidChangeTreeData.event;
    }

    refresh() {
        this._onDidChangeTreeData.fire();
    }

    getTreeItem(element) {
        return element;
    }

    getChildren() {
        const workspaceFolders = vscode.workspace.workspaceFolders;
        if (!workspaceFolders) {
            return Promise.resolve([]);
        }

        const workspacePath = workspaceFolders[0].uri.fsPath;
        const reportFolderPath = path.join(workspacePath, '.vscode', 'report');
        if (!fs.existsSync(reportFolderPath)) {
            return Promise.resolve([]);
        }

        const files = fs.readdirSync(reportFolderPath).filter(file => file.endsWith('.html'));
        return Promise.resolve(files.map(file => new ReportItem(file, reportFolderPath)));
    }
}

class ReportItem extends vscode.TreeItem {
    constructor(label, folderPath) {
        super(label);
        this.resourceUri = vscode.Uri.file(path.join(folderPath, label));
        this.command = {
            command: 'extension.openReport',
            title: 'Open Report',
            arguments: [this.resourceUri]
        };
    }
}

vscode.commands.registerCommand('extension.refreshReports', async () => {
    await generateReport();
});

exports.activate = activate;
