
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Snyk Vulnerability Report Viewer</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    .container { max-width: 800px; margin: auto; }
    .section { margin-bottom: 20px; }
    h2 { color: #333; border-bottom: 2px solid #333; padding-bottom: 5px; }
    .summary-box { background: #f8f8f8; border: 1px solid #ddd; padding: 15px; margin-bottom: 20px; text-align: center; font-weight: bold; }
    .vulnerability { border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; background-color: #f9f9f9; border-radius: 5px; }
    .dropdown { cursor: pointer; padding: 8px; background-color: #eee; border-radius: 5px; margin-bottom: 5px; font-weight: bold; }
    .dropdown-content { display: none; padding: 10px; }
    .dropdown:hover { background-color: #ddd; }
    .critical { color: #a94442; }
    .high { color: #e67e22; }
    .medium { color: #f39c12; }
    .low { color: #5bc0de; }
  </style>
</head>
<body>

<div class="container">
  <h1>Snyk Vulnerability Report Viewer</h1>

  <!-- Input section for Snyk JSON file -->
  <input type="file" id="fileInput" accept=".json">
  <button onclick="loadReport()">Load Report</button>

  <!-- Vulnerabilities Section -->
  <div id="vulnerabilities" class="section"></div>
</div>

<script>
  function loadReport() {
    const fileInput = document.getElementById("fileInput");
    const file = fileInput.files[0];
    if (!file) {
      alert("Please select a file.");
      return;
    }

    const reader = new FileReader();
    reader.onload = function(e) {
      const data = JSON.parse(e.target.result);
      displayReport(data);
    };
    reader.readAsText(file);
  }

  function displayReport(data) {
    const vulnerabilitiesSection = document.getElementById("vulnerabilities");

    // Display vulnerabilities with dropdown for details
    vulnerabilitiesSection.innerHTML = `<h2>Vulnerabilities</h2>`;
    data.vulnerabilities.forEach(vuln => {
      vulnerabilitiesSection.innerHTML += `
        <div class="vulnerability">
          <div class="dropdown ${vuln.severity}" onclick="toggleDropdown(this)">
            <p><strong>Title:</strong> ${vuln.title}</p>
            <p><strong>Severity:</strong> <span class="${vuln.severity}">${vuln.severity}</span></p>
            <p><strong>Module Name:</strong> ${vuln.moduleName}</p>
            <p><strong>CVSS Score:</strong> ${vuln.cvssScore || "N/A"}</p>
          </div>
          <div class="dropdown-content">
            <p><strong>ID:</strong> ${vuln.id}</p>
            <p><strong>Description:</strong> ${vuln.description || "N/A"}</p>
            <p><strong>CVSSv3:</strong> ${vuln.CVSSv3 || "N/A"}</p>
            <p><strong>Exploit:</strong> ${vuln.exploit || "N/A"}</p>
            <p><strong>Fixed In:</strong> ${vuln.fixedIn ? vuln.fixedIn.join(", ") : "N/A"}</p>
            <p><strong>Credit:</strong> ${vuln.credit ? vuln.credit.join(", ") : "N/A"}</p>
            <p><strong>Vulnerable Versions:</strong></p>
            <ul>
              ${vuln.semver?.vulnerable ? vuln.semver.vulnerable.map(version => `<li>${version}</li>`).join('') : '<li>N/A</li>'}
            </ul>
            <p><strong>References:</strong></p>
            <ul>
              ${vuln.references ? vuln.references.map(ref => `<li><a href="${ref}" target="_blank">${ref}</a></li>`).join('') : '<li>N/A</li>'}
            </ul>
          </div>
        </div>
      `;
    });
  }

  // Toggle dropdown content visibility
  function toggleDropdown(element) {
    const content = element.nextElementSibling;
    content.style.display = content.style.display === "block" ? "none" : "block";
  }
</script>
</body>
</html>
