
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Snyk Vulnerability Report Viewer</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    .container { max-width: 800px; margin: auto; }
    .section { margin-bottom: 20px; }
    h2 { color: #333; border-bottom: 2px solid #333; padding-bottom: 5px; }
    .summary-box { background: #f1f1f1; border: 1px solid #ddd; padding: 15px; margin-bottom: 20px; text-align: center; font-weight: bold; display: flex; justify-content: space-around; }
    .summary-item { padding: 10px; border-radius: 5px; }
    .high-count { background-color: #d9534f; color: #fff; }
    .medium-count { background-color: #f39c12; color: #fff; }
    .low-count { background-color: #ffc107; color: #333; }
    .vulnerability { border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; background-color: #f9f9f9; border-radius: 5px; }
    .dropdown { cursor: pointer; padding: 8px; background-color: #eee; border-radius: 5px; margin-bottom: 5px; font-weight: bold; }
    .dropdown-content { display: none; padding: 10px; }
    .dropdown:hover { background-color: #ddd; }
    .high { color: #d9534f; }
    .medium { color: #f39c12; }
    .low { color: #ffc107; }
  </style>
</head>
<body>

<div class="container">
  <h1>Snyk Vulnerability Report Viewer</h1>

  <!-- Input section for Snyk JSON file -->
  <input type="file" id="fileInput" accept=".json">
  <button onclick="loadReport()">Load Report</button>

  <!-- Summary Section -->
  <div id="summary" class="summary-box"></div>

  <!-- Vulnerabilities Section -->
  <div id="vulnerabilities" class="section"></div>
</div>

<script>
  function loadReport() {
    const fileInput = document.getElementById("fileInput");
    const file = fileInput.files[0];
    if (!file) {
      alert("Please select a file.");
      return;
    }

    const reader = new FileReader();
    reader.onload = function(e) {
      const data = JSON.parse(e.target.result);
      displayReport(data);
    };
    reader.readAsText(file);
  }

  function displayReport(data) {
    const vulnerabilitiesSection = document.getElementById("vulnerabilities");
    const summarySection = document.getElementById("summary");

    let highCount = 0;
    let mediumCount = 0;
    let lowCount = 0;

    // Count vulnerabilities by severity
    data.vulnerabilities.forEach(vuln => {
      if (vuln.severity === "high") highCount++;
      else if (vuln.severity === "medium") mediumCount++;
      else if (vuln.severity === "low") lowCount++;
    });

    // Display summary
    summarySection.innerHTML = `
      <div class="summary-item high-count">High: ${highCount}</div>
      <div class="summary-item medium-count">Medium: ${mediumCount}</div>
      <div class="summary-item low-count">Low: ${lowCount}</div>
      <div class="summary-item">Total: ${highCount + mediumCount + lowCount}</div>
    `;

    // Display vulnerabilities with dropdown for details
    vulnerabilitiesSection.innerHTML = `<h2>Vulnerabilities</h2>`;
    data.vulnerabilities.forEach(vuln => {
      vulnerabilitiesSection.innerHTML += `
        <div class="vulnerability">
          <div class="dropdown ${vuln.severity}" onclick="toggleDropdown(this)">
            <p><strong>Title:</strong> ${vuln.title}</p>
            <p><strong>Severity:</strong> <span class="${vuln.severity}">${vuln.severity}</span></p>
            <p><strong>Module Name:</strong> ${vuln.moduleName}</p>
            <p><strong>CVSS Score:</strong> ${vuln.cvssScore || "N/A"}</p>
          </div>
          <div class="dropdown-content">
            <p><strong>ID:</strong> ${vuln.id}</p>
            <p><strong>Language:</strong> ${vuln.language || "N/A"}</p>
            <p><strong>Malicious:</strong> ${vuln.malicious ? "Yes" : "No"}</p>
            <p><strong>Is Disputed:</strong> ${vuln.isDisputed ? "Yes" : "No"}</p>
            <p><strong>Exploit:</strong> ${vuln.exploit || "N/A"}</p>
            <p><strong>Fixed In:</strong> ${vuln.fixedIn ? vuln.fixedIn.join(", ") : "N/A"}</p>
            <p><strong>Credit:</strong> ${vuln.credit ? vuln.credit.join(", ") : "N/A"}</p>
            
            <div class="dropdown" onclick="toggleDropdown(this)">
              <p><strong>Description:</strong> (click to expand)</p>
            </div>
            <div class="dropdown-content">
              <p>${vuln.description || "N/A"}</p>
            </div>

            <p><strong>Vulnerable Versions:</strong></p>
            <ul>
              ${vuln.semver?.vulnerable ? vuln.semver.vulnerable.map(version => `<li>${version}</li>`).join('') : '<li>N/A</li>'}
            </ul>

            <p><strong>Identifiers:</strong></p>
            <ul>
              ${
                vuln.identifiers 
                ? Object.keys(vuln.identifiers).map(idType => 
                    vuln.identifiers[idType].map(id => `<li>${idType}: ${id}</li>`).join('')
                  ).join('') 
                : '<li>N/A</li>'
              }
            </ul>

            <div class="dropdown" onclick="toggleDropdown(this)">
              <p><strong>References:</strong> (click to expand)</p>
            </div>
            <div class="dropdown-content">
              <ul>
                ${vuln.references ? vuln.references.map(ref => `<li><a href="${ref.url}" target="_blank">${ref.title || ref.url}</a></li>`).join('') : '<li>N/A</li>'}
              </ul>
            </div>
          </div>
        </div>
      `;
    });
  }

  // Toggle dropdown content visibility
  function toggleDropdown(element) {
    const content = element.nextElementSibling;
    content.style.display = content.style.display === "block" ? "none" : "block";
  }
</script>
</body>
</html>
