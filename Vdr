

'use client';

import { useState } from 'react';

export default function VDRPage() {
  const [sbomFile, setSbomFile] = useState(null);
  const [vulnFile, setVulnFile] = useState(null);
  const [vdrData, setVdrData] = useState(null);
  const [error, setError] = useState('');

  const handleFileChange = (e, setFile) => {
    const file = e.target.files[0];
    if (file && file.type === 'application/json') {
      setFile(file);
      setError('');
    } else {
      setError('Please upload valid JSON files.');
    }
  };

  const generateVDR = async () => {
    if (!sbomFile || !vulnFile) {
      setError('Please upload both SBOM and vulnerability files.');
      return;
    }

    try {
      const sbomContent = await sbomFile.text();
      const vulnContent = await vulnFile.text();

      const sbomJson = JSON.parse(sbomContent);
      const vulnJson = JSON.parse(vulnContent);

      // Extract components from SBOM
      const components = sbomJson.components || [];

      // Create dependencies based on components
      const dependencies = components.map((component) => ({
        ref: component.purl,
        dependsOn: [], // Add dependencies if needed
      }));

      // Map vulnerabilities to CycloneDX-compliant structure
      const vulnerabilities = vulnJson.vulnerabilities.map((vuln) => ({
        id: vuln.id,
        source: {
          name: vuln.source || 'Unknown',
        },
        ratings: vuln.ratings || [
          {
            score: 0.0,
            severity: 'Unknown',
            method: 'Unknown',
          },
        ],
        affects: vuln.affects || [
          {
            ref: vuln.ref || 'Unknown',
            versions: vuln.versions || [],
          },
        ],
        analysis: {
          state: vuln.state || 'unknown',
          justification: vuln.justification || 'No justification provided',
        },
      }));

      // Create metadata for the VDR
      const metadata = {
        timestamp: new Date().toISOString(),
        tools: [
          {
            vendor: 'YourToolVendor',
            name: 'YourToolName',
            version: '1.0.0',
          },
        ],
      };

      // Assemble the complete VDR object
      const vdr = {
        bomFormat: 'CycloneDX',
        specVersion: '1.4',
        version: 1,
        metadata: metadata,
        components: components,
        dependencies: dependencies,
        vulnerabilities: vulnerabilities,
      };

      setVdrData(vdr);
      setError('');
    } catch (err) {
      setError('Error processing files. Please ensure the JSON format is correct.');
      console.error(err);
    }
  };

  const downloadVDR = () => {
    const blob = new Blob([JSON.stringify(vdrData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'VDR.json';
    link.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div style={{ padding: '20px' }}>
      <h1>Vulnerability Detection Report (VDR) Generator</h1>

      <div>
        <label>Upload SBOM File (CycloneDX):</label>
        <input type="file" onChange={(e) => handleFileChange(e, setSbomFile)} accept=".json" />
      </div>

      <div style={{ marginTop: '10px' }}>
        <label>Upload Vulnerability File:</label>
        <input type="file" onChange={(e) => handleFileChange(e, setVulnFile)} accept=".json" />
      </div>

      <button onClick={generateVDR} style={{ marginTop: '20px' }}>Generate VDR</button>

      {error && <p style={{ color: 'red' }}>{error}</p>}

      {vdrData && (
        <div style={{ marginTop: '20px' }}>
          <h3>Generated VDR Output:</h3>
          <pre style={{ backgroundColor: '#f0f0f0', padding: '10px' }}>
            {JSON.stringify(vdrData, null, 2)}
          </pre>
          <button onClick={downloadVDR} style={{ marginTop: '10px' }}>
            Download VDR
          </button>
        </div>
      )}
    </div>
  );
}
