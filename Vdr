import { useState } from'react';
import { useDropzone } from'react-dropzone';
import yaml from 'js-yaml';
import { saveAs } from 'file-saver';

const VDRGenerator = () => {
  const [sbomFile, setSbomFile] = useState(null);
  const [vulnerabilityFile, setVulnerabilityFile] = useState(null);
  const [vdrOutput, setVdrOutput] = useState('');

  const handleSbomFileChange = (acceptedFiles) => {
    setSbomFile(acceptedFiles[0]);
  };

  const handleVulnerabilityFileChange = (acceptedFiles) => {
    setVulnerabilityFile(acceptedFiles[0]);
  };

  const generateVdr = async () => {
    if (!sbomFile ||!vulnerabilityFile) {
      alert('Please upload both SBOM and vulnerability files');
      return;
    }

    try {
      const sbomJson = await readJsonFile(sbomFile);
      const vulnerabilityJson = await readJsonFile(vulnerabilityFile);

      const vdrData = generateVdrData(sbomJson, vulnerabilityJson);
      const vdrYaml = yaml.dump(vdrData);

      setVdrOutput(vdrYaml);
    } catch (error) {
      console.error(error);
    }
  };

  const downloadVdr = () => {
    if (vdrOutput) {
      const blob = new Blob([vdrOutput], { type: 'text/yaml' });
      saveAs(blob, 'vdr.yaml');
    }
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop: handleSbomFileChange,
  });

  const { getRootProps: getVulnerabilityRootProps, getInputProps: getVulnerabilityInputProps, isDragActive: isVulnerabilityDragActive } = useDropzone({
    onDrop: handleVulnerabilityFileChange,
  });

  return (
    <div>
      <h1>VDR Generator</h1>
      <div {...getRootProps()} className="dropzone">
        <input {...getInputProps()} />
        {
          isDragActive? <p>Drop the SBOM file here...</p> : <p>Drag 'n' drop SBOM file here, or click to select file</p>
        }
        {sbomFile && <p>SBOM file: {sbomFile.name}</p>}
      </div>
      <div {...getVulnerabilityRootProps()} className="dropzone">
        <input {...getVulnerabilityInputProps()} />
        {
          isVulnerabilityDragActive? <p>Drop the vulnerability file here...</p> : <p>Drag 'n' drop vulnerability file here, or click to select file</p>
        }
        {vulnerabilityFile && <p>Vulnerability file: {vulnerabilityFile.name}</p>}
      </div>
      <button onClick={generateVdr}>Generate VDR</button>
      {vdrOutput && (
        <div>
          <h2>VDR Output:</h2>
          <pre>
            <code>{vdrOutput}</code>
          </pre>
          <button onClick={downloadVdr}>Download VDR</button>
        </div>
      )}
    </div>
  );
};

const readJsonFile = async (file) => {
  const fileReader = new FileReader();
  return new Promise((resolve, reject) => {
    fileReader.onload = (event) => {
      try {
        const json = JSON.parse(event.target.result);
        resolve(json);
      } catch (error) {
        reject();
      }
    };
    fileReader.readAsText(file);
  });
};

const generateVdrData = (sbomJson, vulnerabilityJson) => {
  const vdrData = {
    components: [],
  };

  sbomJson.components.forEach((component) => {
    const vulnerabilities = vulnerabilityJson.vulnerabilities.filter(
      (vuln) => vuln.component === component.name
    );

    vdrData.components.push({
      name: component.name,
      version: component.version,
      vulnerabilities: vulnerabilities.map((vuln) => ({
        id: vuln.id,
        description: vuln.description,
        severity: vuln.severity,
      })),
    });
  });

  return vdrData;
};

export default VDRGenerator;
